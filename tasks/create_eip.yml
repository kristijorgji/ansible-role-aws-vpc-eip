---

# Returns:
# * _aws_vpc_eip_facts
- include_tasks: gather_facts.yml

###
### create eip if none exist
###
- name: ensure eip is created if none exists
  ec2_eip:
    # Fixed values
    state: present
    # Optional values
    release_on_disassociation: "{{ eip.release_on_disassociation | default(aws_vpc_eip_release_on_disassociation) }}"
    reuse_existing_ip_allowed: "{{ eip.reuse_existing_ip_allowed | default(aws_vpc_eip_reuse_existing_ip_allowed) }}"
    in_vpc: "{{ eip.in_vpc | default(aws_vpc_eip_in_vpc) }}"
    public_ip: "{{ eip.public_ip | default(omit) }}"
    region: "{{ eip.region | default(aws_vpc_eip_default_region | default(omit)) }}"
    aws_access_key: "{{ lookup('ENV', 'AWS_ACCESS_KEY') | default(omit) }}"
    aws_secret_key: "{{ lookup('ENV', 'AWS_SECRET_KEY') | default(omit) }}"
    security_token: "{{ lookup('ENV', 'AWS_SECURITY_TOKEN') | default(omit) }}"
    profile: "{{ aws_vpc_eip_profile | default(omit) }}"
  register: _aws_vpc_eip
  when:
    - _aws_vpc_eip_facts.addresses | length == 0

- name: ensure eip is tagged
  ec2_tag:
    # Fixed values
    state: present
    # Looked-up values
    resource: "{{ _aws_vpc_eip.allocation_id }}"
    # Required values
    tags: "{{  _aws_vpc_eip_tags | get_attr('key', 'val') }}"
    # Optional values
    region: "{{ eip.region | default(aws_vpc_eip_default_region | default(omit)) }}"
    aws_access_key: "{{ lookup('ENV', 'AWS_ACCESS_KEY') | default(omit) }}"
    aws_secret_key: "{{ lookup('ENV', 'AWS_SECRET_KEY') | default(omit) }}"
    security_token: "{{ lookup('ENV', 'AWS_SECURITY_TOKEN') | default(omit) }}"
    profile: "{{ aws_vpc_eip_profile | default(omit) }}"
  when:
    - _aws_vpc_eip_facts.addresses | length == 0
    - _aws_vpc_eip is succeeded
